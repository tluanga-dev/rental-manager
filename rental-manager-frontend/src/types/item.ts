// Rental period type
export type RentalPeriod = 'HOURLY' | 'DAILY' | 'WEEKLY' | 'MONTHLY';
import { Brand, Category } from './api';

// Item type enums matching API specification
export type ItemType = 'RENTAL' | 'SALE' | 'BOTH';
export type ItemStatus = 'ACTIVE' | 'INACTIVE' | 'DISCONTINUED';

// Nested types for the new API response format
export interface BrandNested {
  id: string;
  name: string;
}

export interface CategoryNested {
  id: string;
  name: string;
}

export interface UnitOfMeasurementNested {
  id: string;
  name: string;
  code?: string;
}

// New nested API response format
export interface ItemNested {
  item_name: string;
  item_status: ItemStatus;
  brand_id?: BrandNested | null;
  category_id?: CategoryNested | null;
  unit_of_measurement_id: UnitOfMeasurementNested;
  rental_rate_per_period: number;
  rental_period: string;
  sale_price: number;
  purchase_price: number;
  initial_stock_quantity: number;
  security_deposit: number;
  description?: string | null;
  specifications?: string | null;
  model_number?: string | null;
  serial_number_required: boolean;
  warranty_period_days: string;
  reorder_point: number;
  is_rentable: boolean;
  is_saleable: boolean;
}

// Item type definitions - Updated for Item Master API
export interface Item {
  id: string;
  item_code?: string;
  sku: string; // Auto-generated by backend
  item_name: string;
  item_type?: ItemType;
  item_status: ItemStatus;
  category_id?: string;
  brand_id?: string;
  unit_of_measurement_id?: string;
  description?: string;
  specifications?: string;
  model_number?: string;
  
  // Pricing fields
  rental_rate_per_period?: number;
  rental_period?: number | string; // Number of days or string
  sale_price?: number;
  purchase_price?: number;
  security_deposit?: number;
  
  // Inventory fields
  serial_number_required?: boolean;
  warranty_period_days?: string;
  reorder_point?: number;
  initial_stock_quantity?: number; // Stock information from API
  
  // Item availability flags
  is_rentable?: boolean;
  is_saleable?: boolean;
  
  // Rental blocking fields
  is_rental_blocked?: boolean;
  rental_block_reason?: string;
  rental_blocked_at?: string;
  rental_blocked_by?: string;
  
  // Timestamps
  created_at?: string;
  updated_at?: string;
  
  // Display name (computed field)
  display_name?: string;
  
  // Related entities (populated on detail views)
  category?: {
    id: string;
    name: string;  // Changed from category_name to name
    category_path?: string;
    category_level?: number;  // Changed from level to category_level
  };
  brand?: {
    id: string;
    name: string;  // Changed from brand_name to name
    code?: string;  // Changed from brand_code to code
    description?: string;
  };
  unit_of_measurement?: {
    id: string;
    name: string;  // Changed from unit_name to name
    code?: string;
    symbol?: string;
  };
  
  // Inventory summary fields (from ItemWithRelationsResponse)
  total_units?: number;
  available_units?: number;
  
  // For nested API response format
  brand_id_nested?: BrandNested;
  category_id_nested?: CategoryNested;
  unit_of_measurement_id_nested?: UnitOfMeasurementNested;
}

export interface ItemDimensions {
  length?: number;
  width?: number;
  height?: number;
  unit?: string;
}

export interface CreateItemRequest {
  item_name: string;
  item_status?: ItemStatus; // Defaults to ACTIVE on backend
  brand_id?: string;
  category_id?: string;
  unit_of_measurement_id?: string;
  rental_rate_per_period?: number;
  rental_period?: number; // Positive integer days
  sale_price?: number;
  purchase_price?: number;
  initial_stock_quantity?: number; // Required for creation
  security_deposit?: number;
  description?: string;
  specifications?: string;
  model_number?: string;
  serial_number_required?: boolean;
  warranty_period_days?: number; // Non-negative integer days
  reorder_point?: number;
  is_rentable?: boolean;
  is_saleable?: boolean;
}

export interface UpdateItemRequest {
  item_name?: string;
  item_type?: ItemType;
  item_status?: ItemStatus;
  category_id?: string;
  brand_id?: string;
  unit_of_measurement_id?: string;
  description?: string;
  specifications?: string;
  model_number?: string;
  
  // Pricing fields
  rental_rate_per_period?: number;
  rental_period?: number; // Number of days
  sale_price?: number;
  purchase_price?: number;
  security_deposit?: number;
  
  // Inventory fields
  serial_number_required?: boolean;
  warranty_period_days?: string;
  reorder_point?: number;
  
  // Item availability flags
  is_rentable?: boolean;
  is_saleable?: boolean;
}

export interface ItemListResponse {
  items: Item[];
  total: number;
  skip: number;
  limit: number;
}

export interface ItemSearchParams {
  // Essential filters only
  search?: string;
  category_id?: string;
  brand_id?: string;
  item_status?: ItemStatus;
  skip?: number;
  limit?: number;
  active_only?: boolean;  // Backend expects this parameter name
  available_only?: boolean;
  is_serialized?: boolean;
  min_price?: number;
  max_price?: number;
  min_stock?: number;
  sort_by?: string;
  sort_order?: 'asc' | 'desc';
  
  // Date range filters
  created_after?: string;
  created_before?: string;
  updated_after?: string;
  updated_before?: string;
}

// SKU Generation types
export interface SkuGenerationRequest {
  category_id?: string;
  item_name: string;
  item_type: ItemType;
}

export interface SkuGenerationResponse {
  sku: string;
  category_code: string;
  subcategory_code: string;
  product_code: string;
  attributes_code: string;
  sequence_number: number;
}

// Legacy support - keeping some interfaces for backwards compatibility
export interface ItemStockUpdate {
  quantity: number;
  operation: 'add' | 'subtract' | 'set';
  reason?: string;
}

export interface ItemPriceUpdate {
  rental_rate_per_period?: number;
  rental_period?: number; // Number of days
  sale_price?: number;
  security_deposit?: number;
}

export interface ItemAvailability {
  item_id: string;
  available_quantity: number;
  reserved_quantity: number;
  total_quantity: number;
  next_available_date?: string;
}

export interface ItemStatistics {
  total_items: number;
  active_items: number;
  total_value: number;
  total_rental_value: number;
}

// Import related types
import type { Category, Brand } from '@/types/api';