# Multi-stage Docker Compose specifically for Location module comprehensive testing
# This orchestrates a complete test pipeline: database setup → seeding → unit tests → 
# integration tests → API tests → performance tests → load tests → coverage reporting

version: '3.8'

services:
  # Isolated PostgreSQL for location testing
  location-test-db:
    image: postgres:17-alpine
    container_name: location_test_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_TEST_USER:-test_user}
      POSTGRES_PASSWORD: ${POSTGRES_TEST_PASSWORD:-test_pass}
      POSTGRES_DB: ${POSTGRES_TEST_DB:-location_test_db}
    ports:
      - "5434:5432"  # Unique port for location tests
    volumes:
      - location_test_postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgis.sql:/docker-entrypoint-initdb.d/init-postgis.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_TEST_USER:-test_user} -d ${POSTGRES_TEST_DB:-location_test_db}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - location_test_network
    command: >
      postgres
      -c shared_preload_libraries='pg_stat_statements'
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c work_mem=16MB
      -c maintenance_work_mem=128MB
      -c effective_cache_size=1GB
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Isolated Redis for location testing
  location-test-redis:
    image: redis:8-alpine
    container_name: location_test_redis
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    ports:
      - "6381:6379"  # Unique port for location tests
    volumes:
      - location_test_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - location_test_network

  # Stage 1: Database Setup and Migration
  location-db-setup:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: location_db_setup
    environment:
      - DATABASE_URL=postgresql+asyncpg://test_user:test_pass@location-test-db:5432/location_test_db
      - REDIS_URL=redis://location-test-redis:6379/0
      - ENVIRONMENT=testing
      - PYTHONPATH=/code
    volumes:
      - ./app:/code/app
      - ./alembic:/code/alembic
      - ./alembic.ini:/code/alembic.ini
    depends_on:
      location-test-db:
        condition: service_healthy
      location-test-redis:
        condition: service_healthy
    networks:
      - location_test_network
    command: >
      sh -c "
        echo '🚀 Setting up location test database...' &&
        python -m alembic upgrade head &&
        echo '✅ Database migration completed'
      "

  # Stage 2: Data Seeding (1000+ locations)
  location-data-seeder:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: location_data_seeder
    environment:
      - DATABASE_URL=postgresql+asyncpg://test_user:test_pass@location-test-db:5432/location_test_db
      - REDIS_URL=redis://location-test-redis:6379/0
      - ENVIRONMENT=testing
      - PYTHONPATH=/code
      - SEED_LOCATIONS_COUNT=1000
      - SEED_WITH_HIERARCHY=true
      - SEED_WITH_COORDINATES=true
    volumes:
      - ./app:/code/app
      - ./scripts:/code/scripts
    depends_on:
      - location-db-setup
    networks:
      - location_test_network
    command: >
      sh -c "
        echo '🌱 Seeding location test data...' &&
        python scripts/seed_locations.py &&
        echo '✅ Location data seeding completed'
      "

  # Stage 3: Unit Tests
  location-unit-tests:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: location_unit_tests
    environment:
      - DATABASE_URL=postgresql+asyncpg://test_user:test_pass@location-test-db:5432/location_test_db
      - REDIS_URL=redis://location-test-redis:6379/0
      - ENVIRONMENT=testing
      - PYTHONPATH=/code
    volumes:
      - ./app:/code/app
      - ./tests:/code/tests
      - ./coverage_reports:/code/coverage_reports
    depends_on:
      - location-data-seeder
    networks:
      - location_test_network
    command: >
      sh -c "
        echo '🧪 Running location unit tests...' &&
        pytest tests/unit/test_location_model.py -v --tb=short \
          --cov=app.models.location \
          --cov-report=term \
          --junitxml=/code/coverage_reports/unit_tests.xml &&
        echo '✅ Unit tests completed'
      "

  # Stage 4: Integration Tests (CRUD)
  location-crud-tests:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: location_crud_tests
    environment:
      - DATABASE_URL=postgresql+asyncpg://test_user:test_pass@location-test-db:5432/location_test_db
      - REDIS_URL=redis://location-test-redis:6379/0
      - ENVIRONMENT=testing
      - PYTHONPATH=/code
    volumes:
      - ./app:/code/app
      - ./tests:/code/tests
      - ./coverage_reports:/code/coverage_reports
    depends_on:
      - location-unit-tests
    networks:
      - location_test_network
    command: >
      sh -c "
        echo '⚙️ Running location CRUD integration tests...' &&
        pytest tests/integration/test_location_crud.py -v --tb=short \
          --cov=app.crud.location \
          --cov=app.services.location \
          --cov-report=term \
          --junitxml=/code/coverage_reports/crud_tests.xml &&
        echo '✅ CRUD tests completed'
      "

  # Test API Server for API tests
  location-test-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: location_test_api
    environment:
      - DATABASE_URL=postgresql+asyncpg://test_user:test_pass@location-test-db:5432/location_test_db
      - REDIS_URL=redis://location-test-redis:6379/0
      - ENVIRONMENT=testing
      - DEBUG=false
      - PYTHONPATH=/code
    volumes:
      - ./app:/code/app
    ports:
      - "8002:8000"  # Unique port for location API tests
    depends_on:
      - location-crud-tests
    networks:
      - location_test_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    command: >
      sh -c "
        echo '🌐 Starting location test API server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000
      "

  # Stage 5: API Tests
  location-api-tests:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: location_api_tests
    environment:
      - DATABASE_URL=postgresql+asyncpg://test_user:test_pass@location-test-db:5432/location_test_db
      - REDIS_URL=redis://location-test-redis:6379/0
      - ENVIRONMENT=testing
      - PYTHONPATH=/code
      - TEST_API_BASE_URL=http://location-test-api:8000
    volumes:
      - ./app:/code/app
      - ./tests:/code/tests
      - ./coverage_reports:/code/coverage_reports
    depends_on:
      location-test-api:
        condition: service_healthy
    networks:
      - location_test_network
    command: >
      sh -c "
        echo '🔌 Running location API tests...' &&
        sleep 5 &&
        pytest tests/integration/test_location_api.py -v --tb=short \
          --cov=app.api.v1.endpoints.locations \
          --cov-report=term \
          --junitxml=/code/coverage_reports/api_tests.xml &&
        echo '✅ API tests completed'
      "

  # Stage 6: Performance Tests
  location-performance-tests:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: location_performance_tests
    environment:
      - DATABASE_URL=postgresql+asyncpg://test_user:test_pass@location-test-db:5432/location_test_db
      - REDIS_URL=redis://location-test-redis:6379/0
      - ENVIRONMENT=testing
      - PYTHONPATH=/code
      - PERFORMANCE_TEST_API_URL=http://location-test-api:8000
      - PERFORMANCE_TEST_LOCATIONS=1000
      - PERFORMANCE_TEST_CONCURRENT_USERS=20
      - PERFORMANCE_TEST_DURATION=60
    volumes:
      - ./app:/code/app
      - ./tests:/code/tests
      - ./coverage_reports:/code/coverage_reports
    depends_on:
      - location-api-tests
    networks:
      - location_test_network
    command: >
      sh -c "
        echo '⚡ Running location performance tests...' &&
        pytest tests/load/test_location_performance.py::test_location_performance_comprehensive -v --tb=short -s \
          --junitxml=/code/coverage_reports/performance_tests.xml &&
        echo '✅ Performance tests completed'
      "

  # Stage 7: Extended Load Tests
  location-load-tests:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: location_load_tests
    environment:
      - DATABASE_URL=postgresql+asyncpg://test_user:test_pass@location-test-db:5432/location_test_db
      - REDIS_URL=redis://location-test-redis:6379/0
      - ENVIRONMENT=testing
      - PYTHONPATH=/code
      - LOAD_TEST_API_URL=http://location-test-api:8000
      - LOAD_TEST_LOCATIONS=2000
      - LOAD_TEST_CONCURRENT_USERS=50
      - LOAD_TEST_DURATION=300
    volumes:
      - ./app:/code/app
      - ./tests:/code/tests
      - ./coverage_reports:/code/coverage_reports
    depends_on:
      - location-performance-tests
    networks:
      - location_test_network
    command: >
      sh -c "
        echo '🔥 Running extended location load tests...' &&
        pytest tests/load/test_location_performance.py::test_location_geospatial_performance_specific -v --tb=short -s \
          --junitxml=/code/coverage_reports/geospatial_load_tests.xml &&
        pytest tests/load/test_location_performance.py::test_location_bulk_operations_performance -v --tb=short -s \
          --junitxml=/code/coverage_reports/bulk_load_tests.xml &&
        echo '✅ Extended load tests completed'
      "

  # Stage 8: Coverage Report Generation
  location-coverage-reporter:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: location_coverage_reporter
    environment:
      - DATABASE_URL=postgresql+asyncpg://test_user:test_pass@location-test-db:5432/location_test_db
      - REDIS_URL=redis://location-test-redis:6379/0
      - ENVIRONMENT=testing
      - PYTHONPATH=/code
    volumes:
      - ./app:/code/app
      - ./tests:/code/tests
      - ./coverage_reports:/code/coverage_reports
    depends_on:
      - location-load-tests
    networks:
      - location_test_network
    command: >
      sh -c "
        echo '📊 Generating comprehensive coverage report...' &&
        pytest tests/unit/test_location_model.py \
               tests/integration/test_location_crud.py \
               tests/integration/test_location_api.py \
          --cov=app.models.location \
          --cov=app.crud.location \
          --cov=app.services.location \
          --cov=app.api.v1.endpoints.locations \
          --cov=app.schemas.location \
          --cov-report=html:/code/coverage_reports/location_module \
          --cov-report=xml:/code/coverage_reports/location_coverage.xml \
          --cov-report=term-missing \
          --cov-fail-under=95 \
          --junitxml=/code/coverage_reports/all_tests.xml &&
        echo '✅ Coverage report generated at: coverage_reports/location_module/index.html'
      "

  # Stage 9: Test Results Summary and Reporting
  location-test-summary:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: location_test_summary
    environment:
      - DATABASE_URL=postgresql+asyncpg://test_user:test_pass@location-test-db:5432/location_test_db
      - REDIS_URL=redis://location-test-redis:6379/0
      - ENVIRONMENT=testing
      - PYTHONPATH=/code
    volumes:
      - ./app:/code/app
      - ./scripts:/code/scripts
      - ./coverage_reports:/code/coverage_reports
    depends_on:
      - location-coverage-reporter
    networks:
      - location_test_network
    command: >
      sh -c "
        echo '' &&
        echo '═══════════════════════════════════════════════════════════════════════' &&
        echo '🏆 LOCATION MODULE COMPREHENSIVE TEST SUITE COMPLETED SUCCESSFULLY! 🏆' &&
        echo '═══════════════════════════════════════════════════════════════════════' &&
        echo '' &&
        echo '📋 Test Summary:' &&
        python scripts/generate_test_summary.py &&
        echo '' &&
        echo '📊 Coverage Reports:' &&
        echo '  • HTML Report: coverage_reports/location_module/index.html' &&
        echo '  • XML Report: coverage_reports/location_coverage.xml' &&
        echo '  • JUnit Reports: coverage_reports/*.xml' &&
        echo '' &&
        echo '🎯 Performance Metrics:' &&
        echo '  • 1000+ locations tested' &&
        echo '  • Geospatial queries performance validated' &&
        echo '  • Bulk operations stress tested' &&
        echo '  • Concurrent user load tested' &&
        echo '' &&
        echo '🔍 Tests Executed:' &&
        echo '  ✓ Unit Tests (Model validation)' &&
        echo '  ✓ Integration Tests (CRUD operations)' &&
        echo '  ✓ API Tests (Endpoint functionality)' &&
        echo '  ✓ Performance Tests (Response times)' &&
        echo '  ✓ Load Tests (Concurrent users)' &&
        echo '  ✓ Coverage Analysis (95%+ target)' &&
        echo '' &&
        echo '═══════════════════════════════════════════════════════════════════════' &&
        echo '✨ Location module is production-ready! ✨' &&
        echo '═══════════════════════════════════════════════════════════════════════'
      "

  # Database Performance Monitor (Optional - use with profile)
  location-db-monitor:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: location_db_monitor
    environment:
      - DATABASE_URL=postgresql+asyncpg://test_user:test_pass@location-test-db:5432/location_test_db
      - PYTHONPATH=/code
    volumes:
      - ./scripts:/code/scripts
      - ./coverage_reports:/code/coverage_reports
    depends_on:
      location-test-db:
        condition: service_healthy
    networks:
      - location_test_network
    profiles:
      - monitoring
    command: >
      sh -c "
        echo '📈 Database performance monitoring active...' &&
        while true; do
          python scripts/monitor_db_performance.py &&
          sleep 30
        done
      "

  # Database Query Analyzer (Optional - use with profile)
  location-query-analyzer:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: location_query_analyzer
    environment:
      - DATABASE_URL=postgresql+asyncpg://test_user:test_pass@location-test-db:5432/location_test_db
      - PYTHONPATH=/code
    volumes:
      - ./scripts:/code/scripts
      - ./coverage_reports:/code/coverage_reports
    depends_on:
      - location-test-summary
    networks:
      - location_test_network
    profiles:
      - analysis
    command: >
      sh -c "
        echo '🔍 Analyzing database query performance...' &&
        python scripts/analyze_query_performance.py &&
        echo '📊 Query analysis complete - results saved to coverage_reports/query_analysis.json'
      "

volumes:
  location_test_postgres_data:
    driver: local
  location_test_redis_data:
    driver: local

networks:
  location_test_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/16