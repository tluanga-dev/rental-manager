# Multi-stage build for production
FROM python:3.13-slim-bookworm AS builder

WORKDIR /code

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    gcc \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install UV
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.cargo/bin:$PATH"

# Copy dependency files
COPY pyproject.toml uv.lock* /code/

# Install production dependencies only
RUN uv sync --frozen --no-dev

# Final stage
FROM python:3.13-slim-bookworm

WORKDIR /code

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Copy UV and dependencies from builder
COPY --from=builder /root/.cargo/bin/uv /usr/local/bin/uv
COPY --from=builder /code/.venv /code/.venv

# Copy application code
COPY . /code/

# Create non-root user
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /code
USER appuser

# Set Python path to use UV's virtual environment
ENV PATH="/code/.venv/bin:$PATH"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import httpx; httpx.get('http://localhost:8000/health')" || exit 1

# Run with production settings
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]