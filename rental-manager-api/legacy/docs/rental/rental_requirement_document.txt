# Rent Transaction

1. classes 

#In the Transaction Header
class RentalStatus(PyEnum):
    RENTAL_INPROGRESS = "RENTAL_INPROGRESS"  # The rental is in progress
    RENTAL_COMPLETED = "RENTAL_COMPLETED"    # Rental is completed and returned without late fee
    RENTAL_LATE = "RENTAL_LATE"             # Rental is late, passed beyond the last date
    RENTAL_EXTENDED = "RENTAL_EXTENDED"     # Extended the rental period
    RENTAL_PARTIAL_RETURN = "RENTAL_PARTIAL_RETURN" #partial return is made
    RENTAL_LATE_PARTIAL_RETURN = "RENTAL_LATE_PARTIAL_RETURN" #rental is late and partial return is made

#inventory/enums.py
class StockMovementType(str, Enum):
    """Stock movement type enumeration."""
    PURCHASE = "PURCHASE"
    PURCHASE_RETURN = "PURCHASE_RETURN"
    SALE = "SALE"
    SALE_RETURN = "SALE_RETURN"
    RENTAL_OUT = "RENTAL_OUT"
    RENTAL_RETURN = "RENTAL_RETURN"
    ADJUSTMENT_POSITIVE = "ADJUSTMENT_POSITIVE"
    ADJUSTMENT_NEGATIVE = "ADJUSTMENT_NEGATIVE"
    TRANSFER_IN = "TRANSFER_IN"
    TRANSFER_OUT = "TRANSFER_OUT"
    DAMAGE_LOSS = "DAMAGE_LOSS"
    THEFT_LOSS = "THEFT_LOSS"
    SYSTEM_CORRECTION = "SYSTEM_CORRECTION"

2. rental transaction creation
   2.1 Expected json payload
      {
         "supplier_id": "f3102baa-73b6-4e6f-b20f-1308a5563f80",
         "location_id": "245bea95-c842-4066-9997-49e08abb0be0",
         "purchase_date": "2025-07-30",
         "due_date": "2025-08-29",
         "reference_number": "PO-2025-001",
         "notes": "Sample purchase transaction for testing",
         "status": "PENDING",
         "items": [
            {
               "item_id": "82d61336-dd89-4e9b-8dbe-89abbc564f01",
               "quantity": 2,
               "unit_cost": 50000.00,
               "tax_rate": 18.0,
               "discount_amount": 2000.00,
               "condition": "A",
               "notes": "Cannon Cement Mixer - Grade A condition"
            },
            {
               "item_id": "f654975a-9401-4b25-b2ca-6e9c01d77610",
               "quantity": 1,
               "unit_cost": 25000.00,
               "tax_rate": 18.0,
               "discount_amount": 0.00,
               "condition": "B",
               "notes": "Additional cement mixer unit"
            },
            {
               "item_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
               "quantity": 5,
               "unit_cost": 1500.00,
               "tax_rate": 12.0,
               "discount_amount": 100.00,
               "condition": "A",
               "notes": "Construction tools - bulk purchase"
            }
         ]
      }

   2.2 Input Validattion
        2.2.1 check that each line item are rentable
        2.2.2 in the itemmaster model -is_rentable is set to true for that item
        2.2.3 in the StockLevel quantity_available should not be lesser than quantity
        2.2.4 the customer must not be blacklisted
        2.2.5 the customer must be active
   2.3 create a TransactionHeader
     
      2.3.2 sample data 
   2.4 create a TransactionLineItem
      2.4.1 Calculations
         2.4.1.1 calculate the no of days it will be rented
         2.4.1.2 user rental_rate_per_period from item master to calculate the line_total
                the customer have to give by multiplying rental_rate_per_period with the no of period
         2.4.1.3 calculate the return date by adding the no of day rental date to the  rental_start_date
                rental date = no of day in a rental period (rental_period) * no of period. rental_period is available in the itemmaster
         2.4.1.4 subtract discount from the line_total
         2.4.1.5 add taxes in the line_total
      2.4.2 linked with TransactionHeader
      2.4.1 sample data
   2.5  Update the Transaction Header fields
      2.5.1 Calculations for TransactionHeader
         2.5.1.1 sum all line_totals to get the total_amount
         2.5.1.2 subtract discount from total_amount
         2.5.1.3 add taxes from total_amount
   2.6 In the inventory module -
         2.6.1 StockLevel -  fetch the entry in StockLevel where item_id=to the line item id and location to the location id supplied. update the quantity_on_rent = existing quantity_on_rent + quantity of that line item
            quantity_available = quantity_available -quantity of that line item
         2.6.2 StockMovement = in the stockmovement create an entry as per the following
            movement_type - RENTAL_OUT
            reference_id = transaction_line_item_id
            quantity_change = quantity supplied in the line item
            quantity_before = find the latest entry in this stockmovement table, copy the quantity_after of that latest entry
            quantity_after = quantity_before-quantity_change
            location_id = location_id supplied in the payload
         2.6.3 InventoryItem
            #if the Item is serializable, create an entry in the InventoryItem

         2.6.3.1 model code
   2.6 Expected Response after creation of Rental transaction   


