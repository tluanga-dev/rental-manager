# models/__init__.py
from __future__ import annotations
from datetime import datetime, timezone
from typing import Any, Optional
from uuid import UUID

import sqlalchemy as sa
from sqlalchemy import (
    Boolean, Column, DateTime, Integer, String, event, func, UUID as SA_UUID
)
from sqlalchemy.orm import as_declarative, declared_attr, Mapped, mapped_column

# ------------------------------------------------------------------
# Base table class (single place that owns the PK and mixins)
# ------------------------------------------------------------------
@as_declarative()
class RentalManagerBaseModel:
    """
    Root base class for every mapped table.
    Supplies the UUID primary key, timestamps, audit and soft-delete fields.
    """

    @declared_attr
    def __tablename__(cls) -> str:
        """
        CamelCase -> snake_case -> plural
        """
        import re

        name = re.sub("(.)([A-Z][a-z]+)", r"\1_\2", cls.__name__)
        name = re.sub("([a-z0-9])([A-Z])", r"\1_\2", name).lower()
        if name.endswith("y"):
            return f"{name[:-1]}ies"
        if name.endswith("s"):
            return f"{name}es"
        return f"{name}s"

    # --- Primary key ------------------------------------------------
    id: Mapped[UUID] = mapped_column(
        SA_UUID(as_uuid=True),
        primary_key=True,
        server_default=func.gen_random_uuid(),
        comment="UUID primary key generated by PostgreSQL",
    )

    # --- Timestamps -------------------------------------------------
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        server_default=func.now(),
        nullable=False,
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        server_default=func.now(),
        onupdate=func.now(),
        nullable=False,
    )

    # --- Audit ------------------------------------------------------
    created_by: Mapped[Optional[str]] = mapped_column(String(255))
    updated_by: Mapped[Optional[str]] = mapped_column(String(255))

    # --- Soft delete ------------------------------------------------
    is_active: Mapped[bool] = mapped_column(
        Boolean, default=True, nullable=False, index=True
    )
    deleted_at: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True))
    deleted_by: Mapped[Optional[str]] = mapped_column(String(255))

    # Helpers --------------------------------------------------------
    def soft_delete(self, by: Optional[str] = None) -> None:
        self.is_active = False
        self.deleted_at = datetime.now(timezone.utc)
        self.deleted_by = by

    def restore(self) -> None:
        self.is_active = True
        self.deleted_at = None
        self.deleted_by = None

    def as_dict(self) -> dict[str, Any]:
        return {c.name: getattr(self, c.name) for c in self.__table__.columns}

    def __repr__(self) -> str:
        return f"<{self.__class__.__name__}(id={self.id})>"


# ------------------------------------------------------------------
# Aliases for backward compatibility and imports
# ------------------------------------------------------------------
Base = RentalManagerBaseModel
BaseModel = RentalManagerBaseModel

# Define common types that models import
UUIDType = SA_UUID

# Define common mixins
class NamedModelMixin:
    """Mixin for models that have a name field"""
    name: Mapped[str] = mapped_column(String(255), nullable=False, index=True)

class CodedModelMixin:
    """Mixin for models that have a code field"""
    code: Mapped[str] = mapped_column(String(50), nullable=False, unique=True, index=True)


# ------------------------------------------------------------------
# Automatic UTC timestamps (fallback for manual construction)
# ------------------------------------------------------------------
@event.listens_for(RentalManagerBaseModel, "before_insert", propagate=True)
def _set_created(mapper, connection, target: RentalManagerBaseModel) -> None:
    now = datetime.now(timezone.utc)
    if not target.created_at:
        target.created_at = now
    if not target.updated_at:
        target.updated_at = now


@event.listens_for(RentalManagerBaseModel, "before_update", propagate=True)
def _set_updated(mapper, connection, target: RentalManagerBaseModel) -> None:
    target.updated_at = datetime.now(timezone.utc)


# ------------------------------------------------------------------
# Metadata export for Alembic
# ------------------------------------------------------------------
metadata = RentalManagerBaseModel.metadata
__all__ = [
    "RentalManagerBaseModel", 
    "Base", 
    "BaseModel", 
    "UUIDType", 
    "NamedModelMixin", 
    "CodedModelMixin", 
    "metadata"
]