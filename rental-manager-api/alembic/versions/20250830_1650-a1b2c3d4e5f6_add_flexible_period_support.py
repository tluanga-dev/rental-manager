"""add flexible period support to rental pricing

Revision ID: a1b2c3d4e5f6
Revises: bf1521b86fd0
Create Date: 2025-08-30 16:50:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = 'a1b2c3d4e5f6'
down_revision: Union[str, None] = 'bf1521b86fd0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Add new period fields to rental_pricing table
    op.add_column('rental_pricing', sa.Column('period_hours', sa.Integer(), nullable=True, comment='Number of hours this pricing period represents (for HOUR unit)'))
    op.add_column('rental_pricing', sa.Column('period_unit', sa.String(length=10), nullable=False, server_default='DAY', comment='Unit of measure for the rental period (HOUR or DAY)'))
    op.add_column('rental_pricing', sa.Column('min_rental_periods', sa.Integer(), nullable=True, comment='Minimum rental duration in periods to qualify for this rate'))
    op.add_column('rental_pricing', sa.Column('max_rental_periods', sa.Integer(), nullable=True, comment='Maximum rental duration in periods for this rate (null = unlimited)'))
    
    # Make period_days nullable since it should be null for HOUR unit
    op.alter_column('rental_pricing', 'period_days',
                    existing_type=sa.INTEGER(),
                    nullable=True,
                    comment='Number of days this pricing period represents (for DAY unit)')
    
    # Add check constraints for the new period fields
    op.create_check_constraint(
        'ck_rental_pricing_period_unit_consistency',
        'rental_pricing',
        "(period_unit = 'DAY' AND period_days > 0 AND period_hours IS NULL) OR (period_unit = 'HOUR' AND period_hours > 0 AND period_days IS NULL)"
    )
    
    op.create_check_constraint(
        'ck_rental_pricing_min_periods_positive',
        'rental_pricing',
        'min_rental_periods IS NULL OR min_rental_periods > 0'
    )
    
    op.create_check_constraint(
        'ck_rental_pricing_max_periods_positive',
        'rental_pricing',
        'max_rental_periods IS NULL OR max_rental_periods > 0'
    )
    
    op.create_check_constraint(
        'ck_rental_pricing_min_max_periods_logical',
        'rental_pricing',
        'min_rental_periods IS NULL OR max_rental_periods IS NULL OR min_rental_periods <= max_rental_periods'
    )
    
    # Update existing records to set period_unit to 'DAY' and ensure period_days has a value
    op.execute("UPDATE rental_pricing SET period_unit = 'DAY' WHERE period_unit IS NULL OR period_unit = ''")
    op.execute("UPDATE rental_pricing SET period_days = 1 WHERE period_days IS NULL AND period_unit = 'DAY'")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop check constraints
    op.drop_constraint('ck_rental_pricing_min_max_periods_logical', 'rental_pricing', type_='check')
    op.drop_constraint('ck_rental_pricing_max_periods_positive', 'rental_pricing', type_='check')
    op.drop_constraint('ck_rental_pricing_min_periods_positive', 'rental_pricing', type_='check')
    op.drop_constraint('ck_rental_pricing_period_unit_consistency', 'rental_pricing', type_='check')
    
    # Remove new columns
    op.drop_column('rental_pricing', 'max_rental_periods')
    op.drop_column('rental_pricing', 'min_rental_periods')
    op.drop_column('rental_pricing', 'period_unit')
    op.drop_column('rental_pricing', 'period_hours')
    
    # Make period_days non-nullable again
    op.alter_column('rental_pricing', 'period_days',
                    existing_type=sa.INTEGER(),
                    nullable=False,
                    comment='Number of days this pricing period represents')

    # ### end Alembic commands ###