"""Add comprehensive transaction module tables

Revision ID: 2f1a99355fd8
Revises: add_locations_complete
Create Date: 2025-08-21 21:34:07.170347

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2f1a99355fd8'
down_revision: Union[str, None] = 'add_locations_complete'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('transaction_headers',
    sa.Column('transaction_number', sa.String(length=50), nullable=False, comment='Human-readable transaction number'),
    sa.Column('transaction_type', sa.Enum('SALE', 'PURCHASE', 'RENTAL', 'RETURN', 'ADJUSTMENT', name='transactiontype'), nullable=False, comment='Type of transaction'),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'CANCELLED', 'ON_HOLD', 'IN_PROGRESS', name='transactionstatus'), nullable=False, comment='Current status'),
    sa.Column('transaction_date', sa.DateTime(timezone=True), nullable=False, comment='Transaction date and time'),
    sa.Column('due_date', sa.Date(), nullable=True, comment='Payment due date'),
    sa.Column('customer_id', sa.UUID(), nullable=True, comment='Customer UUID'),
    sa.Column('supplier_id', sa.UUID(), nullable=True, comment='Supplier UUID'),
    sa.Column('location_id', sa.UUID(), nullable=True, comment='Location UUID'),
    sa.Column('sales_person_id', sa.UUID(), nullable=True, comment='Sales person handling transaction'),
    sa.Column('currency', sa.String(length=3), nullable=False, comment='Currency code'),
    sa.Column('subtotal', sa.Numeric(precision=15, scale=2), nullable=False, comment='Subtotal before discounts and taxes'),
    sa.Column('discount_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Total discount amount'),
    sa.Column('tax_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Total tax amount'),
    sa.Column('shipping_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Shipping charges'),
    sa.Column('total_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Final total amount'),
    sa.Column('paid_amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Amount already paid'),
    sa.Column('payment_status', sa.Enum('PENDING', 'PAID', 'PARTIAL', 'FAILED', 'REFUNDED', name='paymentstatus'), nullable=True, comment='Payment status'),
    sa.Column('deposit_amount', sa.Numeric(precision=15, scale=2), nullable=True, comment='Security deposit for rentals'),
    sa.Column('deposit_paid', sa.Boolean(), nullable=False, comment='Whether deposit has been paid'),
    sa.Column('customer_advance_balance', sa.Numeric(precision=15, scale=2), nullable=False, comment='Customer advance payment balance'),
    sa.Column('reference_transaction_id', sa.UUID(), nullable=True, comment='Reference to original transaction for returns'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Additional notes'),
    sa.Column('reference_number', sa.String(length=50), nullable=True, comment='External reference number'),
    sa.Column('payment_method', sa.Enum('CASH', 'CREDIT_CARD', 'DEBIT_CARD', 'BANK_TRANSFER', 'CHEQUE', 'ONLINE', 'CREDIT_ACCOUNT', name='paymentmethod'), nullable=True, comment='Payment method'),
    sa.Column('payment_reference', sa.String(length=100), nullable=True, comment='Payment reference'),
    sa.Column('return_workflow_state', sa.String(length=50), nullable=True, comment='Return workflow state'),
    sa.Column('delivery_required', sa.Boolean(), nullable=False, comment='Whether delivery is required'),
    sa.Column('delivery_address', sa.Text(), nullable=True, comment='Delivery address if delivery is required'),
    sa.Column('delivery_date', sa.Date(), nullable=True, comment='Scheduled delivery date'),
    sa.Column('delivery_time', sa.Time(), nullable=True, comment='Scheduled delivery time'),
    sa.Column('pickup_required', sa.Boolean(), nullable=False, comment='Whether pickup is required'),
    sa.Column('pickup_date', sa.Date(), nullable=True, comment='Scheduled pickup date'),
    sa.Column('pickup_time', sa.Time(), nullable=True, comment='Scheduled pickup time'),
    sa.Column('extension_count', sa.Integer(), nullable=False, comment='Number of times this rental has been extended'),
    sa.Column('total_extension_charges', sa.Numeric(precision=15, scale=2), nullable=False, comment='Total accumulated extension charges'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False, comment='UUID primary key generated by PostgreSQL'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('updated_by', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.String(length=255), nullable=True),
    sa.CheckConstraint('paid_amount <= total_amount', name='check_paid_not_exceed_total'),
    sa.CheckConstraint('paid_amount >= 0', name='check_positive_paid'),
    sa.CheckConstraint('total_amount >= 0', name='check_positive_total'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='fk_transaction_header_customer'),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], name='fk_transaction_header_location'),
    sa.ForeignKeyConstraint(['reference_transaction_id'], ['transaction_headers.id'], name='fk_transaction_header_reference'),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], name='fk_transaction_header_supplier'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('transaction_number')
    )
    op.create_index('idx_customer_id', 'transaction_headers', ['customer_id'], unique=False)
    op.create_index('idx_delivery_date', 'transaction_headers', ['delivery_date'], unique=False)
    op.create_index('idx_location_id', 'transaction_headers', ['location_id'], unique=False)
    op.create_index('idx_pickup_date', 'transaction_headers', ['pickup_date'], unique=False)
    op.create_index('idx_reference_transaction', 'transaction_headers', ['reference_transaction_id'], unique=False)
    op.create_index('idx_supplier_id', 'transaction_headers', ['supplier_id'], unique=False)
    op.create_index('idx_transaction_date', 'transaction_headers', ['transaction_date'], unique=False)
    op.create_index('idx_transaction_number', 'transaction_headers', ['transaction_number'], unique=False)
    op.create_index('idx_transaction_status', 'transaction_headers', ['status'], unique=False)
    op.create_index('idx_transaction_type', 'transaction_headers', ['transaction_type'], unique=False)
    op.create_index(op.f('ix_transaction_headers_is_active'), 'transaction_headers', ['is_active'], unique=False)
    op.create_table('rental_lifecycles',
    sa.Column('transaction_id', sa.UUID(), nullable=False, comment='Associated transaction'),
    sa.Column('current_status', sa.String(length=30), nullable=False, comment='Current rental status'),
    sa.Column('last_status_change', sa.DateTime(timezone=True), nullable=False, comment='Last status change timestamp'),
    sa.Column('status_changed_by', sa.UUID(), nullable=True, comment='User who changed status'),
    sa.Column('total_returned_quantity', sa.Numeric(precision=10, scale=2), nullable=False, comment='Total quantity returned across all events'),
    sa.Column('expected_return_date', sa.Date(), nullable=True, comment='Expected return date (may change with extensions)'),
    sa.Column('total_late_fees', sa.Numeric(precision=15, scale=2), nullable=False, comment='Accumulated late fees'),
    sa.Column('total_damage_fees', sa.Numeric(precision=15, scale=2), nullable=False, comment='Accumulated damage fees'),
    sa.Column('total_other_fees', sa.Numeric(precision=15, scale=2), nullable=False, comment='Other fees (cleaning, restocking, etc.)'),
    sa.Column('notes', sa.Text(), nullable=True, comment='General notes about the rental'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False, comment='UUID primary key generated by PostgreSQL'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('updated_by', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction_headers.id'], name='fk_rental_lifecycle_transaction'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('transaction_id')
    )
    op.create_index('idx_lifecycle_expected_return', 'rental_lifecycles', ['expected_return_date'], unique=False)
    op.create_index('idx_lifecycle_status', 'rental_lifecycles', ['current_status'], unique=False)
    op.create_index('idx_lifecycle_transaction', 'rental_lifecycles', ['transaction_id'], unique=False)
    op.create_index(op.f('ix_rental_lifecycles_is_active'), 'rental_lifecycles', ['is_active'], unique=False)
    op.create_table('transaction_events',
    sa.Column('transaction_id', sa.UUID(), nullable=False, comment='Transaction this event belongs to'),
    sa.Column('event_type', sa.String(length=50), nullable=False, comment='Type of event (CREATED, VALIDATED, PROCESSED, etc.)'),
    sa.Column('event_category', sa.String(length=30), nullable=False, comment='Event category (TRANSACTION, INVENTORY, PAYMENT, ERROR, etc.)'),
    sa.Column('description', sa.Text(), nullable=False, comment='Human-readable description of the event'),
    sa.Column('event_data', sa.JSON(), nullable=True, comment='Additional structured data related to the event'),
    sa.Column('user_id', sa.UUID(), nullable=True, comment='User who triggered this event'),
    sa.Column('session_id', sa.String(length=100), nullable=True, comment='Session identifier for tracking user sessions'),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='IP address of the client (supports IPv6)'),
    sa.Column('user_agent', sa.String(length=500), nullable=True, comment='User agent string from the request'),
    sa.Column('service_name', sa.String(length=50), nullable=True, comment='Name of the service that generated this event'),
    sa.Column('operation_name', sa.String(length=100), nullable=True, comment='Specific operation being performed'),
    sa.Column('correlation_id', sa.String(length=100), nullable=True, comment='Correlation ID for tracking across services'),
    sa.Column('event_timestamp', sa.DateTime(timezone=True), nullable=False, comment='When this event occurred'),
    sa.Column('processing_duration_ms', sa.String(length=20), nullable=True, comment='How long the operation took in milliseconds'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Event status (SUCCESS, FAILURE, WARNING, INFO)'),
    sa.Column('error_code', sa.String(length=50), nullable=True, comment='Error code if the event represents an error'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if the event represents an error'),
    sa.Column('affected_entities', sa.JSON(), nullable=True, comment='List of entities affected by this event'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False, comment='UUID primary key generated by PostgreSQL'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('updated_by', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction_headers.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_transaction_events_category', 'transaction_events', ['event_category'], unique=False)
    op.create_index('idx_transaction_events_category_status', 'transaction_events', ['event_category', 'status', 'event_timestamp'], unique=False)
    op.create_index('idx_transaction_events_correlation', 'transaction_events', ['correlation_id'], unique=False)
    op.create_index('idx_transaction_events_event_type', 'transaction_events', ['event_type'], unique=False)
    op.create_index('idx_transaction_events_operation', 'transaction_events', ['operation_name'], unique=False)
    op.create_index('idx_transaction_events_status', 'transaction_events', ['status'], unique=False)
    op.create_index('idx_transaction_events_timestamp', 'transaction_events', ['event_timestamp'], unique=False)
    op.create_index('idx_transaction_events_transaction_id', 'transaction_events', ['transaction_id'], unique=False)
    op.create_index('idx_transaction_events_tx_type_time', 'transaction_events', ['transaction_id', 'event_type', 'event_timestamp'], unique=False)
    op.create_index('idx_transaction_events_user_id', 'transaction_events', ['user_id'], unique=False)
    op.create_index(op.f('ix_transaction_events_is_active'), 'transaction_events', ['is_active'], unique=False)
    op.create_table('transaction_lines',
    sa.Column('transaction_header_id', sa.UUID(), nullable=False, comment='Parent transaction ID'),
    sa.Column('line_number', sa.Integer(), nullable=False, comment='Line sequence number within transaction'),
    sa.Column('line_type', sa.Enum('PRODUCT', 'SERVICE', 'DISCOUNT', 'TAX', 'SHIPPING', 'FEE', name='lineitemtype'), nullable=False, comment='Type of line item'),
    sa.Column('item_id', sa.UUID(), nullable=True, comment='Item/Product UUID'),
    sa.Column('inventory_unit_id', sa.UUID(), nullable=True, comment='Specific inventory unit for serialized items'),
    sa.Column('sku', sa.String(length=100), nullable=True, comment='Stock Keeping Unit'),
    sa.Column('description', sa.Text(), nullable=False, comment='Line item description'),
    sa.Column('category', sa.String(length=100), nullable=True, comment='Item category'),
    sa.Column('quantity', sa.Numeric(precision=10, scale=2), nullable=False, comment='Quantity ordered/sold'),
    sa.Column('unit_of_measure', sa.String(length=20), nullable=True, comment='Unit of measurement'),
    sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=False, comment='Price per unit'),
    sa.Column('total_price', sa.Numeric(precision=10, scale=2), nullable=False, comment='Total price before tax/discount'),
    sa.Column('discount_percent', sa.Numeric(precision=5, scale=2), nullable=False, comment='Discount percentage'),
    sa.Column('discount_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Discount amount'),
    sa.Column('tax_rate', sa.Numeric(precision=5, scale=2), nullable=False, comment='Tax rate percentage'),
    sa.Column('tax_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Tax amount'),
    sa.Column('line_total', sa.Numeric(precision=10, scale=2), nullable=False, comment='Total for this line item'),
    sa.Column('rental_start_date', sa.Date(), nullable=True, comment='Item rental start date'),
    sa.Column('rental_end_date', sa.Date(), nullable=True, comment='Item rental end date'),
    sa.Column('rental_period', sa.Integer(), nullable=True, comment='Rental period for this item'),
    sa.Column('rental_period_unit', sa.Enum('HOUR', 'DAY', 'WEEK', 'MONTH', name='rentalperiodunit'), nullable=True, comment='Rental period unit'),
    sa.Column('current_rental_status', sa.Enum('RENTAL_INPROGRESS', 'RENTAL_COMPLETED', 'RENTAL_LATE', 'RENTAL_EXTENDED', 'RENTAL_PARTIAL_RETURN', 'RENTAL_LATE_PARTIAL_RETURN', name='rentalstatus'), nullable=True, comment='Current rental status for this item'),
    sa.Column('daily_rate', sa.Numeric(precision=10, scale=2), nullable=True, comment='Daily rental rate'),
    sa.Column('location_id', sa.UUID(), nullable=True, comment='Fulfillment location UUID'),
    sa.Column('warehouse_location', sa.String(length=100), nullable=True, comment='Specific warehouse location'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Line item status'),
    sa.Column('fulfillment_status', sa.String(length=20), nullable=False, comment='Fulfillment status'),
    sa.Column('returned_quantity', sa.Numeric(precision=10, scale=2), nullable=False, comment='Returned quantity'),
    sa.Column('return_date', sa.Date(), nullable=True, comment='Return date'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Additional notes'),
    sa.Column('return_condition', sa.String(length=1), nullable=True, comment='Return condition (A-D)'),
    sa.Column('return_to_stock', sa.Boolean(), nullable=True, comment='Whether to return to stock'),
    sa.Column('inspection_status', sa.String(length=20), nullable=True, comment='Inspection status for returns'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False, comment='UUID primary key generated by PostgreSQL'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('updated_by', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.String(length=255), nullable=True),
    sa.CheckConstraint('discount_percent >= 0 AND discount_percent <= 100', name='check_valid_discount_percent'),
    sa.CheckConstraint('quantity > 0', name='check_positive_quantity'),
    sa.CheckConstraint('returned_quantity <= quantity', name='check_returned_not_exceed_quantity'),
    sa.CheckConstraint('returned_quantity >= 0', name='check_non_negative_returned'),
    sa.CheckConstraint('tax_rate >= 0', name='check_non_negative_tax_rate'),
    sa.CheckConstraint('unit_price >= 0', name='check_non_negative_price'),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], name='fk_transaction_line_item'),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], name='fk_transaction_line_location'),
    sa.ForeignKeyConstraint(['transaction_header_id'], ['transaction_headers.id'], name='fk_transaction_line_header'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('transaction_header_id', 'line_number', name='uq_transaction_line_number')
    )
    op.create_index('idx_fulfillment_status', 'transaction_lines', ['fulfillment_status'], unique=False)
    op.create_index('idx_inventory_unit_id', 'transaction_lines', ['inventory_unit_id'], unique=False)
    op.create_index('idx_item_id', 'transaction_lines', ['item_id'], unique=False)
    op.create_index('idx_line_number', 'transaction_lines', ['transaction_header_id', 'line_number'], unique=False)
    op.create_index('idx_rental_dates', 'transaction_lines', ['rental_start_date', 'rental_end_date'], unique=False)
    op.create_index('idx_rental_status', 'transaction_lines', ['current_rental_status'], unique=False)
    op.create_index('idx_sku', 'transaction_lines', ['sku'], unique=False)
    op.create_index('idx_status', 'transaction_lines', ['status'], unique=False)
    op.create_index('idx_transaction_header_id', 'transaction_lines', ['transaction_header_id'], unique=False)
    op.create_index(op.f('ix_transaction_lines_is_active'), 'transaction_lines', ['is_active'], unique=False)
    op.create_table('transaction_metadata',
    sa.Column('transaction_id', sa.UUID(), nullable=False, comment='Transaction ID this metadata belongs to'),
    sa.Column('metadata_type', sa.String(length=50), nullable=False, comment='Type of metadata (e.g., RETURN_SALE_RETURN)'),
    sa.Column('metadata_content', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='JSON content with type-specific data'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False, comment='UUID primary key generated by PostgreSQL'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('updated_by', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction_headers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_transaction_metadata_content', 'transaction_metadata', ['metadata_content'], unique=False, postgresql_using='gin')
    op.create_index('idx_transaction_metadata_txn_id', 'transaction_metadata', ['transaction_id'], unique=False)
    op.create_index('idx_transaction_metadata_type', 'transaction_metadata', ['metadata_type'], unique=False)
    op.create_index(op.f('ix_transaction_metadata_is_active'), 'transaction_metadata', ['is_active'], unique=False)
    op.create_table('rental_return_events',
    sa.Column('rental_lifecycle_id', sa.UUID(), nullable=False, comment='Associated rental lifecycle'),
    sa.Column('event_type', sa.String(length=20), nullable=False, comment='Type of return event'),
    sa.Column('event_date', sa.Date(), nullable=False, comment='Date of the event'),
    sa.Column('processed_by', sa.UUID(), nullable=True, comment='User who processed this event'),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=False, comment='When the event was processed'),
    sa.Column('items_returned', sa.JSON(), nullable=True, comment='JSON array of returned items with quantities and conditions'),
    sa.Column('total_quantity_returned', sa.Numeric(precision=10, scale=2), nullable=False, comment='Total quantity returned in this event'),
    sa.Column('late_fees_charged', sa.Numeric(precision=15, scale=2), nullable=False, comment='Late fees charged in this event'),
    sa.Column('damage_fees_charged', sa.Numeric(precision=15, scale=2), nullable=False, comment='Damage fees charged in this event'),
    sa.Column('other_fees_charged', sa.Numeric(precision=15, scale=2), nullable=False, comment='Other fees charged in this event'),
    sa.Column('payment_collected', sa.Numeric(precision=15, scale=2), nullable=False, comment='Payment collected during this event'),
    sa.Column('refund_issued', sa.Numeric(precision=15, scale=2), nullable=False, comment='Refund issued during this event'),
    sa.Column('new_return_date', sa.Date(), nullable=True, comment='New return date for extensions'),
    sa.Column('extension_reason', sa.String(length=200), nullable=True, comment='Reason for extension'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Notes about this event'),
    sa.Column('receipt_number', sa.String(length=50), nullable=True, comment='Receipt number for payments/refunds'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False, comment='UUID primary key generated by PostgreSQL'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('updated_by', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['rental_lifecycle_id'], ['rental_lifecycles.id'], name='fk_rental_return_event_lifecycle'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_return_event_date', 'rental_return_events', ['event_date'], unique=False)
    op.create_index('idx_return_event_lifecycle', 'rental_return_events', ['rental_lifecycle_id'], unique=False)
    op.create_index('idx_return_event_processed', 'rental_return_events', ['processed_at'], unique=False)
    op.create_index('idx_return_event_type', 'rental_return_events', ['event_type'], unique=False)
    op.create_index(op.f('ix_rental_return_events_is_active'), 'rental_return_events', ['is_active'], unique=False)
    op.create_table('rental_status_logs',
    sa.Column('transaction_id', sa.UUID(), nullable=False, comment='Transaction being tracked'),
    sa.Column('transaction_line_id', sa.UUID(), nullable=True, comment='Specific line item (null for header-level changes)'),
    sa.Column('rental_lifecycle_id', sa.UUID(), nullable=True, comment='Associated rental lifecycle'),
    sa.Column('old_status', sa.String(length=30), nullable=True, comment='Previous status (null for initial status)'),
    sa.Column('new_status', sa.String(length=30), nullable=False, comment='New status after change'),
    sa.Column('change_reason', sa.String(length=30), nullable=False, comment='Reason for the status change'),
    sa.Column('change_trigger', sa.String(length=50), nullable=True, comment='What triggered the change'),
    sa.Column('changed_by', sa.UUID(), nullable=True, comment='User who initiated the change'),
    sa.Column('changed_at', sa.DateTime(timezone=True), nullable=False, comment='When the change occurred'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Additional notes about the status change'),
    sa.Column('status_metadata', sa.JSON(), nullable=True, comment='Additional context data'),
    sa.Column('system_generated', sa.Boolean(), nullable=False, comment='Whether this change was system-generated'),
    sa.Column('batch_id', sa.String(length=50), nullable=True, comment='Batch ID for scheduled updates'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False, comment='UUID primary key generated by PostgreSQL'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('updated_by', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['rental_lifecycle_id'], ['rental_lifecycles.id'], name='fk_status_log_lifecycle'),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction_headers.id'], name='fk_status_log_transaction'),
    sa.ForeignKeyConstraint(['transaction_line_id'], ['transaction_lines.id'], name='fk_status_log_line'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_status_log_batch', 'rental_status_logs', ['batch_id'], unique=False)
    op.create_index('idx_status_log_changed_at', 'rental_status_logs', ['changed_at'], unique=False)
    op.create_index('idx_status_log_line', 'rental_status_logs', ['transaction_line_id'], unique=False)
    op.create_index('idx_status_log_reason', 'rental_status_logs', ['change_reason'], unique=False)
    op.create_index('idx_status_log_system', 'rental_status_logs', ['system_generated'], unique=False)
    op.create_index('idx_status_log_transaction', 'rental_status_logs', ['transaction_id'], unique=False)
    op.create_index(op.f('ix_rental_status_logs_is_active'), 'rental_status_logs', ['is_active'], unique=False)
    op.create_table('rental_item_inspections',
    sa.Column('return_event_id', sa.UUID(), nullable=False, comment='Associated return event'),
    sa.Column('transaction_line_id', sa.UUID(), nullable=False, comment='Transaction line being inspected'),
    sa.Column('quantity_inspected', sa.Numeric(precision=10, scale=2), nullable=False, comment='Quantity of this item inspected'),
    sa.Column('condition', sa.String(length=20), nullable=False, comment='Overall condition assessment'),
    sa.Column('inspected_by', sa.UUID(), nullable=True, comment='User who performed inspection'),
    sa.Column('inspected_at', sa.DateTime(timezone=True), nullable=False, comment='Inspection timestamp'),
    sa.Column('has_damage', sa.Boolean(), nullable=False, comment='Whether item has damage'),
    sa.Column('damage_description', sa.Text(), nullable=True, comment='Description of any damage'),
    sa.Column('damage_photos', sa.JSON(), nullable=True, comment='JSON array of damage photo URLs'),
    sa.Column('damage_fee_assessed', sa.Numeric(precision=15, scale=2), nullable=False, comment='Damage fee assessed for this item'),
    sa.Column('cleaning_fee_assessed', sa.Numeric(precision=15, scale=2), nullable=False, comment='Cleaning fee assessed for this item'),
    sa.Column('replacement_required', sa.Boolean(), nullable=False, comment='Whether item needs replacement'),
    sa.Column('replacement_cost', sa.Numeric(precision=15, scale=2), nullable=True, comment='Cost of replacement if required'),
    sa.Column('return_to_stock', sa.Boolean(), nullable=False, comment='Whether item can be returned to stock'),
    sa.Column('stock_location', sa.String(length=100), nullable=True, comment='Where item was returned to stock'),
    sa.Column('inspection_notes', sa.Text(), nullable=True, comment='Detailed inspection notes'),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False, comment='UUID primary key generated by PostgreSQL'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('updated_by', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['return_event_id'], ['rental_return_events.id'], name='fk_inspection_return_event'),
    sa.ForeignKeyConstraint(['transaction_line_id'], ['transaction_lines.id'], name='fk_inspection_transaction_line'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_inspection_condition', 'rental_item_inspections', ['condition'], unique=False)
    op.create_index('idx_inspection_damage', 'rental_item_inspections', ['has_damage'], unique=False)
    op.create_index('idx_inspection_return_event', 'rental_item_inspections', ['return_event_id'], unique=False)
    op.create_index('idx_inspection_transaction_line', 'rental_item_inspections', ['transaction_line_id'], unique=False)
    op.create_index(op.f('ix_rental_item_inspections_is_active'), 'rental_item_inspections', ['is_active'], unique=False)
    op.add_column('locations', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('locations', sa.Column('deleted_by', sa.String(length=255), nullable=True))
    op.alter_column('locations', 'id',
               existing_type=sa.UUID(),
               comment='UUID primary key generated by PostgreSQL',
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('locations', 'created_by',
               existing_type=sa.UUID(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('locations', 'updated_by',
               existing_type=sa.UUID(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('locations', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Active status',
               existing_nullable=False)
    op.drop_index(op.f('idx_location_active_only'), table_name='locations', postgresql_where='(is_active = true)')
    op.drop_index(op.f('idx_location_capacity'), table_name='locations')
    op.drop_index(op.f('idx_location_city'), table_name='locations')
    op.drop_index(op.f('idx_location_city_active'), table_name='locations')
    op.drop_index(op.f('idx_location_coordinates_active'), table_name='locations')
    op.drop_index(op.f('idx_location_country_active'), table_name='locations')
    op.drop_index(op.f('idx_location_created_at'), table_name='locations')
    op.drop_index(op.f('idx_location_has_coordinates'), table_name='locations', postgresql_where='((latitude IS NOT NULL) AND (longitude IS NOT NULL))')
    op.drop_index(op.f('idx_location_latitude'), table_name='locations')
    op.drop_index(op.f('idx_location_longitude'), table_name='locations')
    op.drop_index(op.f('idx_location_manager'), table_name='locations')
    op.drop_index(op.f('idx_location_metadata_gin'), table_name='locations', postgresql_using='gin', postgresql_where='(metadata IS NOT NULL)')
    op.drop_index(op.f('idx_location_parent_active'), table_name='locations')
    op.drop_index(op.f('idx_location_search_address'), table_name='locations')
    op.drop_index(op.f('idx_location_search_name'), table_name='locations')
    op.drop_index(op.f('idx_location_state'), table_name='locations')
    op.drop_index(op.f('idx_location_state_active'), table_name='locations')
    op.drop_index(op.f('idx_location_type_active'), table_name='locations')
    op.drop_index(op.f('idx_location_updated_at'), table_name='locations')
    op.drop_constraint(op.f('locations_location_code_key'), 'locations', type_='unique')
    op.drop_index(op.f('idx_location_code'), table_name='locations')
    op.create_index('idx_location_code', 'locations', ['location_code'], unique=False)
    op.create_index(op.f('ix_locations_city'), 'locations', ['city'], unique=False)
    op.create_index(op.f('ix_locations_country'), 'locations', ['country'], unique=False)
    op.create_index(op.f('ix_locations_is_active'), 'locations', ['is_active'], unique=False)
    op.create_index(op.f('ix_locations_location_code'), 'locations', ['location_code'], unique=True)
    op.create_index(op.f('ix_locations_location_name'), 'locations', ['location_name'], unique=False)
    op.create_index(op.f('ix_locations_location_type'), 'locations', ['location_type'], unique=False)
    op.create_index(op.f('ix_locations_parent_location_id'), 'locations', ['parent_location_id'], unique=False)
    op.create_index(op.f('ix_locations_state'), 'locations', ['state'], unique=False)
    op.drop_constraint(op.f('locations_manager_user_id_fkey'), 'locations', type_='foreignkey')
    op.drop_column('locations', 'manager_user_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('locations', sa.Column('manager_user_id', sa.UUID(), autoincrement=False, nullable=True, comment='Manager user ID'))
    op.create_foreign_key(op.f('locations_manager_user_id_fkey'), 'locations', 'users', ['manager_user_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_locations_state'), table_name='locations')
    op.drop_index(op.f('ix_locations_parent_location_id'), table_name='locations')
    op.drop_index(op.f('ix_locations_location_type'), table_name='locations')
    op.drop_index(op.f('ix_locations_location_name'), table_name='locations')
    op.drop_index(op.f('ix_locations_location_code'), table_name='locations')
    op.drop_index(op.f('ix_locations_is_active'), table_name='locations')
    op.drop_index(op.f('ix_locations_country'), table_name='locations')
    op.drop_index(op.f('ix_locations_city'), table_name='locations')
    op.drop_index('idx_location_code', table_name='locations')
    op.create_index(op.f('idx_location_code'), 'locations', ['location_code'], unique=True)
    op.create_unique_constraint(op.f('locations_location_code_key'), 'locations', ['location_code'])
    op.create_index(op.f('idx_location_updated_at'), 'locations', ['updated_at'], unique=False)
    op.create_index(op.f('idx_location_type_active'), 'locations', ['location_type', 'is_active'], unique=False)
    op.create_index(op.f('idx_location_state_active'), 'locations', ['state', 'is_active'], unique=False)
    op.create_index(op.f('idx_location_state'), 'locations', ['state'], unique=False)
    op.create_index(op.f('idx_location_search_name'), 'locations', ['location_name', 'location_code'], unique=False)
    op.create_index(op.f('idx_location_search_address'), 'locations', ['city', 'state', 'country'], unique=False)
    op.create_index(op.f('idx_location_parent_active'), 'locations', ['parent_location_id', 'is_active'], unique=False)
    op.create_index(op.f('idx_location_metadata_gin'), 'locations', [sa.literal_column('(metadata::jsonb)')], unique=False, postgresql_using='gin', postgresql_where='(metadata IS NOT NULL)')
    op.create_index(op.f('idx_location_manager'), 'locations', ['manager_user_id'], unique=False)
    op.create_index(op.f('idx_location_longitude'), 'locations', ['longitude'], unique=False)
    op.create_index(op.f('idx_location_latitude'), 'locations', ['latitude'], unique=False)
    op.create_index(op.f('idx_location_has_coordinates'), 'locations', ['id'], unique=False, postgresql_where='((latitude IS NOT NULL) AND (longitude IS NOT NULL))')
    op.create_index(op.f('idx_location_created_at'), 'locations', ['created_at'], unique=False)
    op.create_index(op.f('idx_location_country_active'), 'locations', ['country', 'is_active'], unique=False)
    op.create_index(op.f('idx_location_coordinates_active'), 'locations', ['latitude', 'longitude', 'is_active'], unique=False)
    op.create_index(op.f('idx_location_city_active'), 'locations', ['city', 'is_active'], unique=False)
    op.create_index(op.f('idx_location_city'), 'locations', ['city'], unique=False)
    op.create_index(op.f('idx_location_capacity'), 'locations', ['capacity'], unique=False)
    op.create_index(op.f('idx_location_active_only'), 'locations', ['location_type', 'city', 'state', 'country'], unique=False, postgresql_where='(is_active = true)')
    op.alter_column('locations', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Active status',
               existing_nullable=False)
    op.alter_column('locations', 'updated_by',
               existing_type=sa.String(length=255),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('locations', 'created_by',
               existing_type=sa.String(length=255),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('locations', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='UUID primary key generated by PostgreSQL',
               existing_nullable=False,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_column('locations', 'deleted_by')
    op.drop_column('locations', 'deleted_at')
    op.drop_index(op.f('ix_rental_item_inspections_is_active'), table_name='rental_item_inspections')
    op.drop_index('idx_inspection_transaction_line', table_name='rental_item_inspections')
    op.drop_index('idx_inspection_return_event', table_name='rental_item_inspections')
    op.drop_index('idx_inspection_damage', table_name='rental_item_inspections')
    op.drop_index('idx_inspection_condition', table_name='rental_item_inspections')
    op.drop_table('rental_item_inspections')
    op.drop_index(op.f('ix_rental_status_logs_is_active'), table_name='rental_status_logs')
    op.drop_index('idx_status_log_transaction', table_name='rental_status_logs')
    op.drop_index('idx_status_log_system', table_name='rental_status_logs')
    op.drop_index('idx_status_log_reason', table_name='rental_status_logs')
    op.drop_index('idx_status_log_line', table_name='rental_status_logs')
    op.drop_index('idx_status_log_changed_at', table_name='rental_status_logs')
    op.drop_index('idx_status_log_batch', table_name='rental_status_logs')
    op.drop_table('rental_status_logs')
    op.drop_index(op.f('ix_rental_return_events_is_active'), table_name='rental_return_events')
    op.drop_index('idx_return_event_type', table_name='rental_return_events')
    op.drop_index('idx_return_event_processed', table_name='rental_return_events')
    op.drop_index('idx_return_event_lifecycle', table_name='rental_return_events')
    op.drop_index('idx_return_event_date', table_name='rental_return_events')
    op.drop_table('rental_return_events')
    op.drop_index(op.f('ix_transaction_metadata_is_active'), table_name='transaction_metadata')
    op.drop_index('idx_transaction_metadata_type', table_name='transaction_metadata')
    op.drop_index('idx_transaction_metadata_txn_id', table_name='transaction_metadata')
    op.drop_index('idx_transaction_metadata_content', table_name='transaction_metadata', postgresql_using='gin')
    op.drop_table('transaction_metadata')
    op.drop_index(op.f('ix_transaction_lines_is_active'), table_name='transaction_lines')
    op.drop_index('idx_transaction_header_id', table_name='transaction_lines')
    op.drop_index('idx_status', table_name='transaction_lines')
    op.drop_index('idx_sku', table_name='transaction_lines')
    op.drop_index('idx_rental_status', table_name='transaction_lines')
    op.drop_index('idx_rental_dates', table_name='transaction_lines')
    op.drop_index('idx_line_number', table_name='transaction_lines')
    op.drop_index('idx_item_id', table_name='transaction_lines')
    op.drop_index('idx_inventory_unit_id', table_name='transaction_lines')
    op.drop_index('idx_fulfillment_status', table_name='transaction_lines')
    op.drop_table('transaction_lines')
    op.drop_index(op.f('ix_transaction_events_is_active'), table_name='transaction_events')
    op.drop_index('idx_transaction_events_user_id', table_name='transaction_events')
    op.drop_index('idx_transaction_events_tx_type_time', table_name='transaction_events')
    op.drop_index('idx_transaction_events_transaction_id', table_name='transaction_events')
    op.drop_index('idx_transaction_events_timestamp', table_name='transaction_events')
    op.drop_index('idx_transaction_events_status', table_name='transaction_events')
    op.drop_index('idx_transaction_events_operation', table_name='transaction_events')
    op.drop_index('idx_transaction_events_event_type', table_name='transaction_events')
    op.drop_index('idx_transaction_events_correlation', table_name='transaction_events')
    op.drop_index('idx_transaction_events_category_status', table_name='transaction_events')
    op.drop_index('idx_transaction_events_category', table_name='transaction_events')
    op.drop_table('transaction_events')
    op.drop_index(op.f('ix_rental_lifecycles_is_active'), table_name='rental_lifecycles')
    op.drop_index('idx_lifecycle_transaction', table_name='rental_lifecycles')
    op.drop_index('idx_lifecycle_status', table_name='rental_lifecycles')
    op.drop_index('idx_lifecycle_expected_return', table_name='rental_lifecycles')
    op.drop_table('rental_lifecycles')
    op.drop_index(op.f('ix_transaction_headers_is_active'), table_name='transaction_headers')
    op.drop_index('idx_transaction_type', table_name='transaction_headers')
    op.drop_index('idx_transaction_status', table_name='transaction_headers')
    op.drop_index('idx_transaction_number', table_name='transaction_headers')
    op.drop_index('idx_transaction_date', table_name='transaction_headers')
    op.drop_index('idx_supplier_id', table_name='transaction_headers')
    op.drop_index('idx_reference_transaction', table_name='transaction_headers')
    op.drop_index('idx_pickup_date', table_name='transaction_headers')
    op.drop_index('idx_location_id', table_name='transaction_headers')
    op.drop_index('idx_delivery_date', table_name='transaction_headers')
    op.drop_index('idx_customer_id', table_name='transaction_headers')
    op.drop_table('transaction_headers')
    # ### end Alembic commands ###