version: '3.8'

services:
  # Isolated PostgreSQL for 100% coverage testing
  coverage-test-db:
    image: postgres:17-alpine
    container_name: rental_coverage_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_TEST_USER:-coverage_user}
      POSTGRES_PASSWORD: ${POSTGRES_TEST_PASSWORD:-coverage_pass}
      POSTGRES_DB: ${POSTGRES_TEST_DB:-rental_coverage_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5435:5432"  # Different port for coverage tests
    volumes:
      - coverage_postgres_data:/var/lib/postgresql/data
      - ./scripts/init-test-db.sql:/docker-entrypoint-initdb.d/init-test-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_TEST_USER:-coverage_user} -d ${POSTGRES_TEST_DB:-rental_coverage_db}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - coverage_test_network
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=128MB
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=8MB

  # Isolated Redis for coverage testing
  coverage-test-redis:
    image: redis:8-alpine
    container_name: rental_coverage_redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6382:6379"  # Different port for coverage tests
    volumes:
      - coverage_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - coverage_test_network

  # Main test application for 100% coverage
  coverage-test-app:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
      args:
        - PYTHON_VERSION=3.11
    container_name: rental_coverage_app
    depends_on:
      coverage-test-db:
        condition: service_healthy
      coverage-test-redis:
        condition: service_healthy
    environment:
      # Database configuration
      DATABASE_URL: postgresql+asyncpg://coverage_user:coverage_pass@coverage-test-db:5432/rental_coverage_db
      SYNC_DATABASE_URL: postgresql://coverage_user:coverage_pass@coverage-test-db:5432/rental_coverage_db
      
      # Redis configuration
      REDIS_URL: redis://coverage-test-redis:6379/0
      
      # Testing environment
      ENVIRONMENT: testing
      TESTING: "true"
      COVERAGE: "true"
      DEBUG: "false"
      
      # API configuration
      API_V1_STR: /api/v1
      PROJECT_NAME: "Rental Manager Coverage Test"
      SECRET_KEY: coverage_test_secret_key_for_testing_only
      
      # Coverage specific
      COVERAGE_RCFILE: /app/.coveragerc
      COVERAGE_FILE: /app/coverage-reports/.coverage
      PYTEST_WORKERS: 8
      
      # Performance testing
      LOAD_TEST_USERS: 50
      LOAD_TEST_DURATION: 30
      
      # Rate limiting (relaxed for testing)
      RATE_LIMIT_REQUESTS: 10000
      RATE_LIMIT_PERIOD: 60
      
    volumes:
      - ./app:/app/app
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
      - ./pyproject.toml:/app/pyproject.toml
      - ./coverage-reports:/app/coverage-reports
      - ./htmlcov:/app/htmlcov
      - ./test-results:/app/test-results
    ports:
      - "8003:8000"  # Different port for coverage testing
    networks:
      - coverage_test_network
    working_dir: /app

  # Test runner for 100% coverage
  coverage-test-runner:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: rental_coverage_runner
    depends_on:
      coverage-test-app:
        condition: service_started
    environment:
      DATABASE_URL: postgresql+asyncpg://coverage_user:coverage_pass@coverage-test-db:5432/rental_coverage_db
      REDIS_URL: redis://coverage-test-redis:6379/0
      API_URL: http://coverage-test-app:8000
      PYTHONPATH: /app
      COVERAGE_FILE: /app/coverage-reports/.coverage
    volumes:
      - ./app:/app/app
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./coverage-reports:/app/coverage-reports
      - ./htmlcov:/app/htmlcov
      - ./test-results:/app/test-results
    networks:
      - coverage_test_network
    command: >
      sh -c "
        echo 'ðŸš€ Starting 100% Coverage Test Suite'
        echo '======================================='
        
        # Wait for services
        sleep 15
        
        # Setup database
        echo 'ðŸ“Š Setting up test database...'
        alembic upgrade head
        
        # Generate comprehensive test data
        echo 'ðŸŒ± Seeding comprehensive test data...'
        python scripts/seed_comprehensive_test_data.py
        
        # Run comprehensive test suite with coverage
        echo 'ðŸ§ª Running comprehensive test suite...'
        pytest tests/ \
          --cov=app \
          --cov-branch \
          --cov-report=html:htmlcov \
          --cov-report=json:coverage-reports/coverage.json \
          --cov-report=xml:coverage-reports/coverage.xml \
          --cov-report=term-missing \
          --cov-fail-under=100 \
          -v \
          --tb=short \
          --maxfail=0 \
          --durations=10 \
          --html=test-results/coverage-report.html \
          --self-contained-html \
          --color=yes
          
        # Validate 100% coverage achieved
        echo 'âœ… Validating 100% coverage...'
        python scripts/validate_coverage.py
        
        echo 'ðŸŽ‰ 100% Coverage Test Suite Completed!'
      "
    profiles:
      - coverage-testing

  # Parallel test runner for faster execution
  coverage-test-parallel:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: rental_coverage_parallel
    depends_on:
      coverage-test-app:
        condition: service_started
    environment:
      DATABASE_URL: postgresql+asyncpg://coverage_user:coverage_pass@coverage-test-db:5432/rental_coverage_db
      REDIS_URL: redis://coverage-test-redis:6379/0
      PYTHONPATH: /app
      COVERAGE_FILE: /app/coverage-reports/.coverage
    volumes:
      - ./app:/app/app
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./coverage-reports:/app/coverage-reports
      - ./htmlcov:/app/htmlcov
      - ./test-results:/app/test-results
    networks:
      - coverage_test_network
    command: >
      sh -c "
        echo 'âš¡ Running parallel tests for maximum speed...'
        
        # Run tests in parallel with xdist
        pytest tests/ \
          --cov=app \
          --cov-branch \
          --cov-report=html:htmlcov \
          --cov-report=json:coverage-reports/coverage.json \
          --cov-report=term-missing \
          --cov-fail-under=100 \
          -n auto \
          --dist=loadscope \
          -v \
          --tb=short \
          --maxfail=5 \
          --color=yes
          
        echo 'âš¡ Parallel testing completed!'
      "
    profiles:
      - parallel-testing

  # Coverage analysis and reporting service
  coverage-analyzer:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: rental_coverage_analyzer
    depends_on:
      - coverage-test-runner
    environment:
      PYTHONPATH: /app
    volumes:
      - ./scripts:/app/scripts
      - ./coverage-reports:/app/coverage-reports
      - ./htmlcov:/app/htmlcov
      - ./test-results:/app/test-results
    networks:
      - coverage_test_network
    command: >
      sh -c "
        echo 'ðŸ“Š Analyzing coverage results...'
        
        # Generate detailed coverage analysis
        python scripts/analyze_coverage_gaps.py
        
        # Generate coverage badges
        python scripts/generate_coverage_badge.py
        
        # Create comprehensive report
        python scripts/generate_comprehensive_report.py
        
        echo 'ðŸ“Š Coverage analysis completed!'
        echo ''
        echo 'ðŸ“ˆ Results available at:'
        echo '  â€¢ HTML Report: htmlcov/index.html'
        echo '  â€¢ JSON Report: coverage-reports/coverage.json'
        echo '  â€¢ XML Report: coverage-reports/coverage.xml'
        echo '  â€¢ Test Report: test-results/coverage-report.html'
        echo ''
      "
    profiles:
      - analysis

  # Performance profiling for coverage tests
  coverage-profiler:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: rental_coverage_profiler
    depends_on:
      coverage-test-app:
        condition: service_started
    environment:
      DATABASE_URL: postgresql+asyncpg://coverage_user:coverage_pass@coverage-test-db:5432/rental_coverage_db
      REDIS_URL: redis://coverage-test-redis:6379/0
      PYTHONPATH: /app
      PROFILING: "true"
    volumes:
      - ./app:/app/app
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./profiling-reports:/app/profiling-reports
    networks:
      - coverage_test_network
    command: >
      sh -c "
        echo 'âš¡ Running performance profiling on test suite...'
        
        # Profile test execution
        pytest tests/ \
          --profile \
          --profile-svg \
          -v \
          --tb=short \
          --durations=20
          
        echo 'âš¡ Performance profiling completed!'
      "
    profiles:
      - profiling

volumes:
  coverage_postgres_data:
    driver: local
  coverage_redis_data:
    driver: local

networks:
  coverage_test_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.35.0.0/16